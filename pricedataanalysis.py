# -*- coding: utf-8 -*-
"""PriceDataAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19hAwUm06kJTGKD3HRVJ7mhzmnOiYtqJ-
"""

#Import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from datetime import datetime

#Loading and cleaning the data
df=pd.read_csv("Nat_Gas.csv")

df['Dates'] = pd.to_datetime(df['Dates'], format="%m/%d/%y")

#Set Date as index
df.set_index('Dates',inplace=True)

df=df.asfreq('ME')

df=df.sort_index()

print(df.head())

print(df.index.freq)

#Interpolation

#Reindex to daily dates
daily_index = pd.date_range(start=df.index.min(), end=df.index.max(),freq='D')

#Interpolate linearly for missing days
df_daily = df.reindex(daily_index)
df_daily['Prices'] = df_daily['Prices'].interpolate(method='linear')

#Extrapolation (forecast 12 months)

#Using Exponential Smoothing for seasonality and trend
model = ExponentialSmoothing(df['Prices'], trend="add", seasonal="add", seasonal_periods=12)
fit = model.fit()

#Forecasting 12 months ahead
forecast = fit.forecast(12)

#Creating future date index
future_index = pd.date_range(start=df.index.max() + pd.offsets.MonthEnd(1) , periods=12, freq='ME')
forecast_df = pd.DataFrame({'Prices': forecast.values}, index=future_index)

#Combining actual and forecast
full_series = pd.concat([df,forecast_df])

#Function to query price

def get_price_estimate(input_date:str) -> float:
  """
  Takes a date string(YYYY-MM-DD) and returns an estimatednatural gas price.
  Handles both historical (interpolated) and extrapolated dates.
  """

  query_date = pd.to_datetime(input_date)

  if query_date <= df_daily.index.max():
    #Historical or within orignal range -> use daily interpolated values
    return float(df_daily.loc[query_date, 'Prices'])
  elif query_date <= full_series.index.max():
    #Future date within forecast horizon
    #Align to month-end since forecast is monthly
    nearest_month = query_date + pd.offsets.MonthEnd(0)
    return float(full_series.loc[nearest_month, 'Prices'])
  else:
    raise ValueError("Date beyond forecast horizon (only up to 12 months ahead supported).")

#Visualization
plt.figure(figsize=(12,6))
plt.plot(df.index, df['Prices'], label="Historical (Monthly)", marker="o")
plt.plot(df_daily.index, df_daily['Prices'], label="Interpolated (Daily)", alpha=0.5)
plt.plot(forecast_df.index, forecast_df['Prices'], label="Forecast (12 months)", linestyle="--", marker="x")
plt.title("Natural Gas Prices: Historical, Interpolated & Forecast")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.grid(True)
plt.show()

print("Price on 2021-03-15:", get_price_estimate("2021-03-15"))
print("Price on 2024-07-10:", get_price_estimate("2024-07-10"))
print("Price on 2025-03-31:", get_price_estimate("2025-03-31"))